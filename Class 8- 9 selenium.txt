Test Script vs Test Case? 

Test script - code that we create automated testing - Automation test case - regression testing 
Test case - manual test case 

setup: 
java >> jdk + ide ( eclipse, intellij) coding editor 
selenium >> interact with web browser - 2 jar files - add them build path
driver file >> chrome browser (94) - chrome driver(94) 
internet explorer - IE driver
mozila - gecko driver 



How to start writing Test Script for a requirement or user stories given? 

Test Script >> runnable class - main method of java 
non-runable - creating methods/functions which can be re-used - no 
main method of java

Test Data: data used for testing 
url >> www.google.com 

user story 1: 
user should be able to login with valid credentials

validate the requirement: 
test scenerio: 
validate the login with starndar_input as username and secret_sauce as 
a password, and the application should login to the home page. 

1 test - 1 test case - 1 test script 


user story 2: 
user should not be able to login with invalid credentials 

Question: how to validate these 2 scenerios in automation test script 

user story 3: a valid user should be able to add product to the cart and buy the product through the checkout page 




expected result >> requirement 
actual result >> after we execute the test 

Developing Test Automation Framework? 

getcurrenturl
gettitle
isdisplayed
isenabled
isselected


Release: 3 months - new version of the application 

3 months - 2 weeks sprint - 6 sprints 

Release planning starts - 

10 new user stories 

1. new functionalities 
2. modified functionalities 
3. defect/bug fixes - 15 defects 

Test environment - december 20th - 200 test cases 

new code deployed - 


dev environment - 
test environment - 
staging environment - 
production environment - end-user

finding web elements - 

attribute = value 


<input class="input_error form_input error" placeholder="Username" type="text" data-test="username" id="user-name" name="user-name" autocorrect="off" autocapitalize="none" value="standard_user", 
elementname = "username">

id
name
xpath = //*[@id="user-name"]

xpath structure : modified xpath 

//tagname[@attribute="value"]

//input[@elementname="username"]

text box , id = "value"
button , id = "value"

//input[@elementname="username"]

//button[@id="value"]

what locating tecnique you prefer and why? 

relative xpath - xpath created using id and value, start with // 

absolute xpath - /html/body/div/div/div[2]/div[1]/div[1]/div/form/div[1]/input

if something is / , it means absolute xpath 

css selector: 

tagname[attribute='value']
input[id='value']
[id='value']


finding weblements - id, name, xpath, css selector 

anchor tag - a tag - linktext, partial link text 

finding multiple web elements - classname , tagname 

findelements()


constructor in java - 

locating tecnique - done, id or name  
synchoronization - implicit, explicit 
page object model - 

Automation testing framework: 

object driven framework: the tecnique of seperationg web objects or web elements from the test scripts - 

by creating page object model classes 

data driven framework: the tecniuqes of seperating test data from test scripts - XML, data table, excel files, database file 

key word driven framework: seperating non-test data from test script





finding web elements - 
Test data - 

constructor: 

2 features of non-runnable class 

design or prototype of a system - 
properties - global variable
functions / method 

what are the properties of the thing we are designing? >> global variable
what it can do >> function/method 

constructor: is a tecnique - used to setup initial value for any variable - or exectue something upon the any object is created 

enforces the object to pass some value when the object is created or execute something when the object is created





20 web elements - 100 times 

5 times - 

30 test scripts - 

page object model - non runnable classes with function

for each web elemenet - create one function

page object model classes - for each web page you should create 
one page object model class

10 web pages - 10 page object model 
20 web pages - 20 page object model classes 




int can store whole number
string can store set of charaters 
webelemnt can store web elemnet 

wedriver can store a browser instance 

non-runnable class >> properties and functions

10 web pages - 
loginpage
signuppage
checkoutpage
helppage

10 scenarios - 

What is object driven framework? 

Why we create page object model? 

How to create page object model? 


Test script >> automated test case , test steps we are executing using code 

based on requirement - user stories  - validate the requirement 

Test scenario - 3 scnearios 

50 user stories - 

150 test scripts - 

50 web elements - 

500 different places - 

Webelements - web objects 
test data - 

page object model - non runnable class with functions 

for each web- page we should create one page object model 

loginpage >> all my webelements of login page is in the loginpage class
checkoutpage - update the weblement location













