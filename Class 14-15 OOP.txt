Object Oriented Programming - 

Object oriented Design - 

Class and Object >> 

Class : 
main method >> this class can be run as a java application - Traditional programming concept 

no main method >> class - code reusuability - block of code - 

class you create in java - is actually datatype - reference datatype 

int, String, double - primary datatype 

WebElement - reference datatype 

Class : prototype or design of a system 

2 components : 
what the system can do - method/functions
what are the atributes or properties of the system - 

static >> if a component is part of object or class 

method overloading: two or multiple methods implemented with different parameters 

constructor: executes as soon as an object is created 

constructor overloading: multiple constructor with different parameters 



Inside one class >> 

class
object
properties
methods 
method overloading
constructor
constructor overloading
static 

Relationship between multiple 

inheritance - two classes - properties and method
parent class - super class
child class - sub class 

method overriding >> happens between multiple classes with child and parent relationship - if subclass or childclass has the same function as parent/ super class , childclass object has to use its own functions 

super keyword: super keyword is used by childclass to access parent class function or constuctor


abstract class >> if a class is abstract class, we can not create any object of the class - so the way to use this class is to create a child class and child class object will get everything from parent class 


interface: is an outline of methods or properties those can be implemented by different classes 

difference between abstract class and interface: 

WebDriver driver = new Chromedriver();



webdriver driver = new chromedriver(); 

WebDriver is an interface








OOP Concepts 

class
object
properties
methods 
method overloading
constructor
constructor overloading
static 
inheritance 
method overriding 
super keyword 
abstract class
interface 
access modifiers 
exception 

implementation of OOP in automation testing code
super keyword
interface - an outline of classes - 
webdriver - abstract method

difference between interface and abstract class - 

WebDriver driver = new Chromedriver(); 

Access modifiers: these are modifiers that define accessibility of functions and properties 

private: only accessible inside the class
public: it is accessible inside class, inside pacakge and outside package  
protected: inside the class and package but not from outside package 
no modifier: same as protected
properties and functions

exception and errors: 

errors: syntax error - you can not compile the code

handling exception using Try catch block 
throw the exception with a function 

thread.sleep(); 

no such element exception - when code doesnt find the web element 
null pointer exception - you are pointing a file or variable but it doesnt exist 

illigal state exception - chromedriver
browser exception - browser version and driver version is different 
stale element exception - if you move on page to another then want to find web element from the previous page then you will get stale element exception 

Abstraction: private properties or functions become abstract, abstract class - 
Polymorphism - many form 
method overloading is type of polymorphism
one object in different forms 

car 
sedan
accord
 

accord a = new accord;

a is an accord, a is a sedan, a is also car 



encapsulation: 
having properties and functions in the same class 


inheritance: capability of creating super class and sub class relationship 
 









Java defines OOP concepts as follows:

Abstraction. Using simple things to represent complexity. We all know how to turn the TV on, but we don’t need to know how it works in order to enjoy it. In Java, abstraction means simple things like objects, classes and variables represent more complex underlying code and data. This is important because it lets you avoid repeating the same work multiple times.

Encapsulation. The practice of keeping fields within a class private, then providing access to those fields via public methods. Encapsulation is a protective barrier that keeps the data and code safe within the class itself. We can then reuse objects like code components or variables without allowing open access to the data system-wide.

Inheritance. A special feature of Object-Oriented Programming in Java, Inheritance lets programmers create new classes that share some of the attributes of existing classes. Using Inheritance lets us build on previous work without reinventing the wheel.


Polymorphism. Allows programmers to use the same word in Java to mean different things in different contexts. One form of polymorphism is method overloading. That’s when the code itself implies different meanings. The other form is method overriding. That’s when the values of the supplied variables imply different meanings. Let’s delve a little further.



OOP implementation 

inheritance: 
page object 
test scripts 

interface: webdriver

method overloading: assertequals()

static: assertequals function are static 

page classes: to create page class objects to use methods to find web elements 

baseclass: creating a class for providing the utility functions required for 
automation testing 

Framework: 

1. organization - TestNG and cucumber
2. test suite creation - 
3. report generation - 
4. data driven framework - TestNG xml and Cucumber data table 
5. pass/fail - assertion 
6. page object model - 
7. framework : baseclass
8. OOP - function
9. how to find web elements 
10. wait 

basic java: 
datatype
conditional
looping
array

code organziation: 
build your code - maven
share and version - git/github
running test from sever and shc
manual testing - sdlc , agile scrum 
















